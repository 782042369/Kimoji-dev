<?php

uses(RefreshDatabase::class);

test('close returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $ticket = \App\Models\Ticket::factory()->create();
    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->post(route('tickets.close', [$ticket]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('close aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $ticket = \App\Models\Ticket::factory()->create();
    $user = \App\Models\User::factory()->create();

    // TODO: perform additional setup to trigger `abort_unless(403)`...

    $response = $this->actingAs($user)->post(route('tickets.close', [$ticket]), [
        // TODO: send request data
    ]);

    $response->assertForbidden();
});

test('create returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $ticketCategories = \App\Models\TicketCategory::factory()->times(3)->create();
    $ticketPriorities = \App\Models\TicketPriority::factory()->times(3)->create();
    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->get(route('tickets.create'));

    $response->assertOk();
    $response->assertViewIs('ticket.create');
    $response->assertViewHas('categories');
    $response->assertViewHas('priorities');

    // TODO: perform additional assertions
});

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $ticket = \App\Models\Ticket::factory()->create();
    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->delete(route('tickets.destroy', [$ticket]));

    $response->assertOk();
    $this->assertModelMissing($ticket);

    // TODO: perform additional assertions
});

test('destroy aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $ticket = \App\Models\Ticket::factory()->create();
    $user = \App\Models\User::factory()->create();

    // TODO: perform additional setup to trigger `abort_unless(403)`...

    $response = $this->actingAs($user)->delete(route('tickets.destroy', [$ticket]));

    $response->assertForbidden();
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->get(route('tickets.index'));

    $response->assertOk();
    $response->assertViewIs('ticket.index');

    // TODO: perform additional assertions
});

test('show returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $ticket = \App\Models\Ticket::factory()->create();
    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->get(route('tickets.show', [$ticket]));

    $response->assertOk();
    $response->assertViewIs('ticket.show');
    $response->assertViewHas('user', $user);
    $response->assertViewHas('ticket', $ticket);

    // TODO: perform additional assertions
});

test('show aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $ticket = \App\Models\Ticket::factory()->create();
    $user = \App\Models\User::factory()->create();

    // TODO: perform additional setup to trigger `abort_unless(403)`...

    $response = $this->actingAs($user)->get(route('tickets.show', [$ticket]));

    $response->assertForbidden();
});

test('store validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        \App\Http\Controllers\TicketController::class,
        'store',
        \App\Http\Requests\StoreTicketRequest::class
    );
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->post(route('tickets.store'), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

// test cases...
