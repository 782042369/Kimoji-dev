<?php
/**
 * NOTICE OF LICENSE.
 *
 * UNIT3D Community Edition is open-sourced software licensed under the GNU Affero General Public License v3.0
 * The details is bundled with this project in the file LICENSE.txt.
 *
 * @project    UNIT3D Community Edition
 *
 * @author     HDVinnie <hdinnovations@protonmail.com>
 * @license    https://www.gnu.org/licenses/agpl-3.0.en.html/ GNU Affero General Public License v3.0
 */

use App\Http\Controllers\Staff\ChatBotController;
use App\Http\Requests\Staff\UpdateChatBotRequest;
use App\Models\Bot;
use App\Models\User;

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->delete(route('staff.bots.destroy', [$bot]));

    $response->assertOk();
    $this->assertModelMissing($bot);

    // TODO: perform additional assertions
});

test('destroy aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();
    $user = User::factory()->create();

    // TODO: perform additional setup to trigger `abort_if(403)`...

    $response = $this->actingAs($user)->delete(route('staff.bots.destroy', [$bot]));

    $response->assertForbidden();
});

test('disable returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('staff.bots.disable', [$bot]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('edit returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('staff.bots.edit', [$bot]));

    $response->assertOk();
    $response->assertViewIs('Staff.chat.bot.edit');
    $response->assertViewHas('user', $user);
    $response->assertViewHas('bot', $bot);

    // TODO: perform additional assertions
});

test('enable returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('staff.bots.enable', [$bot]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bots = Bot::factory()->times(3)->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('staff.bots.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.chat.bot.index');
    $response->assertViewHas('bots', $bots);

    // TODO: perform additional assertions
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        ChatBotController::class,
        'update',
        UpdateChatBotRequest::class
    );
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $bot = Bot::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->patch(route('staff.bots.update', [$bot]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

// test cases...
