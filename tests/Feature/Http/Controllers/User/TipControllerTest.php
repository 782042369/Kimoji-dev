<?php

uses(RefreshDatabase::class);

test('index returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();
    $bonTransactions = \App\Models\BonTransactions::factory()->times(3)->create();
    $authUser = \App\Models\User::factory()->create();

    $response = $this->actingAs($authUser)->get(route('users.tips.index', [$user]));

    $response->assertOk();
    $response->assertViewIs('user.tip.index');
    $response->assertViewHas('user', $user);
    $response->assertViewHas('tips');
    $response->assertViewHas('bon');
    $response->assertViewHas('sentTips');
    $response->assertViewHas('receivedTips');

    // TODO: perform additional assertions
});

test('index aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();
    $bonTransactions = \App\Models\BonTransactions::factory()->times(3)->create();
    $authUser = \App\Models\User::factory()->create();

    // TODO: perform additional setup to trigger `abort_unless(403)`...

    $response = $this->actingAs($authUser)->get(route('users.tips.index', [$user]));

    $response->assertForbidden();
});

test('store validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        \App\Http\Controllers\User\TipController::class,
        'store',
        \App\Http\Requests\StoreTipRequest::class
    );
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();
    $torrent = \App\Models\Torrent::factory()->create();
    $post = \App\Models\Post::factory()->create();
    $authUser = \App\Models\User::factory()->create();

    $response = $this->actingAs($authUser)->post(route('users.tips.store', [$user]), [
        // TODO: send request data
    ]);

    $response->assertRedirect(withSuccess(trans('bon.success-tip')));

    // TODO: perform additional assertions
});

test('store aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $user = \App\Models\User::factory()->create();
    $torrent = \App\Models\Torrent::factory()->create();
    $post = \App\Models\Post::factory()->create();
    $authUser = \App\Models\User::factory()->create();

    // TODO: perform additional setup to trigger `abort_unless(403)`...

    $response = $this->actingAs($authUser)->post(route('users.tips.store', [$user]), [
        // TODO: send request data
    ]);

    $response->assertForbidden();
});

// test cases...
