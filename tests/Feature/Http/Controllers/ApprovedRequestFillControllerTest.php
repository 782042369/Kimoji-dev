<?php

uses(RefreshDatabase::class);

test('destroy returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $torrentRequest = \App\Models\TorrentRequest::factory()->create();
    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->delete(route('requests.approved_fills.destroy', [$torrentRequest]));

    $response->assertOk();
    $this->assertModelMissing($torrentRequest);

    // TODO: perform additional assertions
});

test('destroy aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $torrentRequest = \App\Models\TorrentRequest::factory()->create();
    $user = \App\Models\User::factory()->create();

    // TODO: perform additional setup to trigger `abort_unless(403)`...

    $response = $this->actingAs($user)->delete(route('requests.approved_fills.destroy', [$torrentRequest]));

    $response->assertForbidden();
});

test('store returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $torrentRequest = \App\Models\TorrentRequest::factory()->create();
    $user = \App\Models\User::factory()->create();

    $response = $this->actingAs($user)->post(route('requests.approved_fills.store', [$torrentRequest]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('store aborts with a 403', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $torrentRequest = \App\Models\TorrentRequest::factory()->create();
    $user = \App\Models\User::factory()->create();

    // TODO: perform additional setup to trigger `abort_unless(403)`...

    $response = $this->actingAs($user)->post(route('requests.approved_fills.store', [$torrentRequest]), [
        // TODO: send request data
    ]);

    $response->assertForbidden();
});

// test cases...
